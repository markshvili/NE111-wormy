# Wormy (a Nibbles clone)
# By Al Sweigart al@inventwithpython.com
# http://inventwithpython.com/pygame
# Released under a "Simplified BSD" license

#------------------------------------------------------------ Valentyna
# ------------------------------------------------------------ | | | | |
# ------------------------------------------------------------ V V V V V
import random
import pygame
import sys
from pygame.locals import *

FPS = 15
WINDOWWIDTH = 640
WINDOWHEIGHT = 480
CELLSIZE = 20
assert WINDOWWIDTH % CELLSIZE == 0, "Window width must be a multiple of cell size."
assert WINDOWHEIGHT % CELLSIZE == 0, "Window height must be a multiple of cell size."
CELLWIDTH = int(WINDOWWIDTH / CELLSIZE)
CELLHEIGHT = int(WINDOWHEIGHT / CELLSIZE)

#             R    G    B
WHITE = (255, 255, 255)
BLACK = (0,   0,   0)
RED = (255,   0,   0)
GREEN = (0, 255,   0)
DARKGREEN = (0, 155,   0)
DARKGRAY = (40,  40,  40)
BGCOLOR = BLACK

UP = 'up'
DOWN = 'down'
LEFT = 'left'
RIGHT = 'right'

HEAD = 0  # syntactic sugar: index of the worm's head

# ------------------------------------------------------------ ^ ^ ^ ^ ^
# ------------------------------------------------------------ | | | | |
#------------------------------------------------------------ Valentyna

#------------------------------------------------------------ Ryan
# ------------------------------------------------------------ | |
# ------------------------------------------------------------ V V


def main():
    global FPSCLOCK, DISPLAYSURF, BASICFONT

    pygame.init()  #<----- initalize all imported pygame modules
    FPSCLOCK = pygame.time.Clock() #<---- set a time tracker and assign it to an variable
    DISPLAYSURF = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT)) #<---- draw a rectangular display screen based on these two variables: WINDOWWDITH as width 
    # and WINDOWHEIGHT as the height
    BASICFONT = pygame.font.Font('freesansbold.ttf', 18) #<----- set a font style as freesansbold.ttf, font size as 18 and assign it to BASICFONT
    pygame.display.set_caption('Wormy')  # set the windows title for the game, like general games in windowed and its name will show on the top left of the window.

    showStartScreen()  # Starts the game
    while True:
        runGame()  # call the runGame function which is to run the game before any other "end" game conditions kick in.
        showGameOverScreen() # once an "end" game condition is fulfilled, run the showGameOverScreen function to indicate the game is over.

# ------------------------------------------------------------ ^ ^
# ------------------------------------------------------------ | |
#------------------------------------------------------------ Ryan

#------------------------------------------------------------ Flora
# ------------------------------------------------------------ | | |
# ------------------------------------------------------------ V V V


def runGame():
    # Set a random start point.
    startx = random.randint(5, CELLWIDTH - 6)
    starty = random.randint(5, CELLHEIGHT - 6)
    wormCoords = [{'x': startx,     'y': starty},
                  {'x': startx - 1, 'y': starty},
                  {'x': startx - 2, 'y': starty}]
    direction = RIGHT

    # Start the apple in a random place.
    apple = getRandomLocation()

    while True:  # main game loop
        for event in pygame.event.get():  # event handling loop
            if event.type == QUIT:
                terminate()
            elif event.type == KEYDOWN:
                if (event.key == K_LEFT or event.key == K_a) and direction != RIGHT:
                    direction = LEFT
                elif (event.key == K_RIGHT or event.key == K_d) and direction != LEFT:
                    direction = RIGHT
                elif (event.key == K_UP or event.key == K_w) and direction != DOWN:
                    direction = UP
                elif (event.key == K_DOWN or event.key == K_s) and direction != UP:
                    direction = DOWN
                elif event.key == K_ESCAPE:
                    terminate()

        # check if the worm has hit itself or the edge
        if wormCoords[HEAD]['x'] == -1 or wormCoords[HEAD]['x'] == CELLWIDTH or wormCoords[HEAD]['y'] == -1 or wormCoords[HEAD]['y'] == CELLHEIGHT:
            return  # game over
        for wormBody in wormCoords[1:]:
            if wormBody['x'] == wormCoords[HEAD]['x'] and wormBody['y'] == wormCoords[HEAD]['y']:
                return  # game over

        # check if worm has eaten an apply
        if wormCoords[HEAD]['x'] == apple['x'] and wormCoords[HEAD]['y'] == apple['y']:
            # don't remove worm's tail segment
            apple = getRandomLocation()  # set a new apple somewhere
        else:
            del wormCoords[-1]  # remove worm's tail segment

        # move the worm by adding a segment in the direction it is moving
        if direction == UP:
            newHead = {'x': wormCoords[HEAD]['x'],
                       'y': wormCoords[HEAD]['y'] - 1}
        elif direction == DOWN:
            newHead = {'x': wormCoords[HEAD]['x'],
                       'y': wormCoords[HEAD]['y'] + 1}
        elif direction == LEFT:
            newHead = {'x': wormCoords[HEAD]
                       ['x'] - 1, 'y': wormCoords[HEAD]['y']}
        elif direction == RIGHT:
            newHead = {'x': wormCoords[HEAD]
                       ['x'] + 1, 'y': wormCoords[HEAD]['y']}
        wormCoords.insert(0, newHead)
        DISPLAYSURF.fill(BGCOLOR)
        drawGrid()
        drawWorm(wormCoords)
        drawApple(apple)
        drawScore(len(wormCoords) - 3)
        pygame.display.update()
        FPSCLOCK.tick(FPS)
# ------------------------------------------------------------ ^ ^ ^
# ------------------------------------------------------------ | | |
#------------------------------------------------------------ Flora

#------------------------------------------------------------ Mark
# ------------------------------------------------------------ | |
# ------------------------------------------------------------ V V


def drawPressKeyMsg():
    pressKeySurf = BASICFONT.render('Press a key to play.', True, DARKGRAY)
    pressKeyRect = pressKeySurf.get_rect()
    pressKeyRect.topleft = (WINDOWWIDTH - 200, WINDOWHEIGHT - 30)
    DISPLAYSURF.blit(pressKeySurf, pressKeyRect)


def checkForKeyPress():
    if len(pygame.event.get(QUIT)) > 0:
        terminate()

    keyUpEvents = pygame.event.get(KEYUP)
    if len(keyUpEvents) == 0:
        return None
    if keyUpEvents[0].key == K_ESCAPE:
        terminate()
    return keyUpEvents[0].key


def showStartScreen():
    titleFont = pygame.font.Font('freesansbold.ttf', 100)
    titleSurf1 = titleFont.render('Wormy!', True, WHITE, DARKGREEN)
    titleSurf2 = titleFont.render('Wormy!', True, GREEN)

    degrees1 = 0
    degrees2 = 0
    while True:
        DISPLAYSURF.fill(BGCOLOR)
        rotatedSurf1 = pygame.transform.rotate(titleSurf1, degrees1)
        rotatedRect1 = rotatedSurf1.get_rect()
        rotatedRect1.center = (WINDOWWIDTH / 2, WINDOWHEIGHT / 2)
        DISPLAYSURF.blit(rotatedSurf1, rotatedRect1)

        rotatedSurf2 = pygame.transform.rotate(titleSurf2, degrees2)
        rotatedRect2 = rotatedSurf2.get_rect()
        rotatedRect2.center = (WINDOWWIDTH / 2, WINDOWHEIGHT / 2)
        DISPLAYSURF.blit(rotatedSurf2, rotatedRect2)

        drawPressKeyMsg()

        if checkForKeyPress():
            pygame.event.get()  # clear event queue
            return
        pygame.display.update()
        FPSCLOCK.tick(FPS)
        degrees1 += 3  # rotate by 3 degrees each frame
        degrees2 += 7  # rotate by 7 degrees each frame


def terminate():
    pygame.quit()
    sys.exit()
# ------------------------------------------------------------ ^ ^
# ------------------------------------------------------------ | |
#------------------------------------------------------------ Mark


#------------------------------------------------------------ Valentyna
# ------------------------------------------------------------ | | | | |
# ------------------------------------------------------------ V V V V V
def getRandomLocation():
    return {'x': random.randint(0, CELLWIDTH - 1), 'y': random.randint(0, CELLHEIGHT - 1)}


def showGameOverScreen():
    gameOverFont = pygame.font.Font('freesansbold.ttf', 150)
    gameSurf = gameOverFont.render('Game', True, WHITE)
    overSurf = gameOverFont.render('Over', True, WHITE)
    gameRect = gameSurf.get_rect()
    overRect = overSurf.get_rect()
    gameRect.midtop = (WINDOWWIDTH / 2, 10)
    overRect.midtop = (WINDOWWIDTH / 2, gameRect.height + 10 + 25)

    DISPLAYSURF.blit(gameSurf, gameRect)
    DISPLAYSURF.blit(overSurf, overRect)
    drawPressKeyMsg()
    pygame.display.update()
    pygame.time.wait(500)
    checkForKeyPress()  # clear out any key presses in the event queue

    while True:
        if checkForKeyPress():
            pygame.event.get()  # clear event queue
            return


def drawScore(score):
    scoreSurf = BASICFONT.render('Score: %s' % (score), True, WHITE)
    scoreRect = scoreSurf.get_rect()
    scoreRect.topleft = (WINDOWWIDTH - 120, 10)
    DISPLAYSURF.blit(scoreSurf, scoreRect)
# ------------------------------------------------------------ ^ ^ ^ ^ ^
# ------------------------------------------------------------ | | | | |
#------------------------------------------------------------ Valentyna

#------------------------------------------------------------ Ryan
# ------------------------------------------------------------ | |
# ------------------------------------------------------------ V V


def drawWorm(wormCoords):  # this is the draw wormy function with an variable called wormCorrds as wormy corrdinates.
    for coord in wormCoords: # within the wormCoords variable, coord variable is callable.
        x = coord['x'] * CELLSIZE  # set the x position for the worm's head
        y = coord['y'] * CELLSIZE  # set the y position for the worm's head
        wormSegmentRect = pygame.Rect(x, y, CELLSIZE, CELLSIZE) # assign an variable wormSegemtRect to be its body based and x and y position with width and height of CEELSIZE(20)
        pygame.draw.rect(DISPLAYSURF, DARKGREEN, wormSegmentRect)  # draw worm's body on the DISPLAYSURF surface(game screen) with a darkgreen colour and size of wormSegmentRect
        wormInnerSegmentRect = pygame.Rect(x + 4, y + 4, CELLSIZE - 8, CELLSIZE - 8) # draw a smaller rectangle that fill up the body
        pygame.draw.rect(DISPLAYSURF, GREEN, wormInnerSegmentRect) # draw worm's body on the DISPLAYSURF surface(game screen) with a green colour and size of wormInnerSegmentRect


def drawApple(coord):
    x = coord['x'] * CELLSIZE #position of apple's x value
    y = coord['y'] * CELLSIZE # position of apple's y value
    appleRect = pygame.Rect(x, y, CELLSIZE, CELLSIZE) # size of the apple
    pygame.draw.rect(DISPLAYSURF, RED, appleRect) # draw the apple out


def drawGrid(): # draw the play screen
    for x in range(0, WINDOWWIDTH, CELLSIZE):  # draw vertical lines
        pygame.draw.line(DISPLAYSURF, DARKGRAY, (x, 0), (x, WINDOWHEIGHT)) # draw vertical lines on the DISPLAYSURF surface(game screen) from 0 to x
    for y in range(0, WINDOWHEIGHT, CELLSIZE):  # draw horizontal lines
        pygame.draw.line(DISPLAYSURF, DARKGRAY, (0, y), (WINDOWWIDTH, y))# draw horizontal lines on the DISPLAYSURF surface(game screen) from 0 to y


if __name__ == '__main__':
    main()
# ------------------------------------------------------------ ^ ^
# ------------------------------------------------------------ | |
#------------------------------------------------------------ Ryan
