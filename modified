# Wormy (a Nibbles clone)
# By Al Sweigart al@inventwithpython.com
# http://inventwithpython.com/pygame
# Released under a "Simplified BSD" license

#------------------------------------------------------------ Valentyna
# ------------------------------------------------------------ | | | | |
# ------------------------------------------------------------ V V V V V
# imports the random module (allows you to randomize things like tha apple's location)
import random
import pygame  # imports all available pygame modules
import sys  # imports the system module which is a set of functions which gives you info on the runtime environment
from pygame.locals import *  # imports pygame module into current namespace

FPS = 15  # define frames per second, 15 different images show up every second on screen
WINDOWWIDTH = 640  # define the width of the window
WINDOWHEIGHT = 480  # define the height of the window
CELLSIZE = 20  # define the size of each cell
assert WINDOWWIDTH % CELLSIZE == 0, "Window width must be a multiple of cell size."
assert WINDOWHEIGHT % CELLSIZE == 0, "Window height must be a multiple of cell size."
# so that there is an integer value of cells in the window lengthwise
CELLWIDTH = int(WINDOWWIDTH / CELLSIZE)
# so that there is an integer value of cells in the window heightwise
CELLHEIGHT = int(WINDOWHEIGHT / CELLSIZE)

#             R    G    B   #the specific intensities of red, blue, green that must be combined to create the specific colours
WHITE = (255, 255, 255)
BLACK = (0,   0,   0)
RED = (255,   0,   0)
GREEN = (0, 255,   0)
DARKGREEN = (0, 155,   0)
DARKGRAY = (40,  40,  40)
BGCOLOR = BLACK  # background color is black

UP = 'up'  # up arrow on keyboard
DOWN = 'down'  # down arrow on keyboard
LEFT = 'left'  # left arrow on keyboard
RIGHT = 'right'  # right arrow on keyboard

HEAD = 0  # syntactic sugar: index of the worm's head

# ------------------------------------------------------------ ^ ^ ^ ^ ^
# ------------------------------------------------------------ | | | | |
#------------------------------------------------------------ Valentyna

#------------------------------------------------------------ Ryan
# ------------------------------------------------------------ | |
# ------------------------------------------------------------ V V


def main():
    global FPSCLOCK, DISPLAYSURF, BASICFONT

    pygame.init()  # <----- initalize all imported pygame modules
    # <---- set a time tracker and assign it to an variable
    FPSCLOCK = pygame.time.Clock()
    # <---- draw a rectangular display screen based on these two variables: WINDOWWDITH as width
    DISPLAYSURF = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))
    # and WINDOWHEIGHT as the height
    # <----- set a font style as freesansbold.ttf, font size as 18 and assign it to BASICFONT
    BASICFONT = pygame.font.Font('freesansbold.ttf', 18)
    # set the windows title for the game, like general games in windowed and its name will show on the top left of the window.
    pygame.display.set_caption('Wormy')

    showStartScreen()  # Starts the game
    while True:
        # call the runGame function which is to run the game before any other "end" game conditions kick in.
        runGame()
        # once an "end" game condition is fulfilled, run the showGameOverScreen function to indicate the game is over.
        showGameOverScreen()

# ------------------------------------------------------------ ^ ^
# ------------------------------------------------------------ | |
#------------------------------------------------------------ Ryan

#------------------------------------------------------------ Flora
# ------------------------------------------------------------ | | |
# ------------------------------------------------------------ V V V


def runGame():
    # Set a random start point.
    # random x-coordinate of start point of worm
    startx = random.randint(5, CELLWIDTH - 6)
    # random y-coordinate of start point of worm
    starty = random.randint(5, CELLHEIGHT - 6)
    wormCoords = [{'x': startx,     'y': starty},  # coordinates of the two other body segments of the worm
                  {'x': startx - 1, 'y': starty},
                  {'x': startx - 2, 'y': starty}]
    direction = RIGHT  # starting direction of worm

    # Start the apple in a random place.
    apple = getRandomLocation()

    while True:  # main game loop
        for event in pygame.event.get():  # event handling loop
            if event.type == QUIT:
                terminate()
            elif event.type == KEYDOWN:  # which keys control the direction of the worm
                # turn left when left/a key is pressed and the direction of the worm isn't currently right
                if (event.key == K_LEFT or event.key == K_a) and direction != RIGHT:
                    direction = LEFT
                # turn right when right/d key is pressed and the direction of the worm isn't currently left
                elif (event.key == K_RIGHT or event.key == K_d) and direction != LEFT:
                    direction = RIGHT
                # turn up when up/w key is pressed and the direction of the worm isn't currently down
                elif (event.key == K_UP or event.key == K_w) and direction != DOWN:
                    direction = UP
                # turn down when down/s key is pressed and the direction of the worm isn't currently up
                elif (event.key == K_DOWN or event.key == K_s) and direction != UP:
                    direction = DOWN
                elif event.key == K_ESCAPE:  # quit game when escape key is pressed
                    terminate()

        # check if the worm has hit itself or the edge
        # when the head of the worm hits a wall (which can be defined as the cellwidth/cell height or a negative coordinate) the game ends
        if wormCoords[HEAD]['x'] == -1 or wormCoords[HEAD]['x'] == CELLWIDTH or wormCoords[HEAD]['y'] == -1 or wormCoords[HEAD]['y'] == CELLHEIGHT:
            return  # game over
        for wormBody in wormCoords[1:]:
            # when the worm hits itself (which is defined as when the coordinate of the head equals the coordinate of one of its body segments) the game ends
            if wormBody['x'] == wormCoords[HEAD]['x'] and wormBody['y'] == wormCoords[HEAD]['y']:
                return  # game over

        # check if worm has eaten an apple
        # when the coordinates of the head equals the coordinates of the apple, a new tail segment is added
        if wormCoords[HEAD]['x'] == apple['x'] and wormCoords[HEAD]['y'] == apple['y']:
            # don't remove worm's tail segment
            apple = getRandomLocation()  # set a new apple somewhere
        else:
            del wormCoords[-1]  # remove worm's tail segment

        # move the worm by adding a segment in the direction it is moving
        if direction == UP:
            newHead = {'x': wormCoords[HEAD]['x'],
                       'y': wormCoords[HEAD]['y'] - 1}  # when the direction is up add a segment ontop of the head and define it as the new head
        elif direction == DOWN:
            newHead = {'x': wormCoords[HEAD]['x'],
                       'y': wormCoords[HEAD]['y'] + 1}  # when the direction is down add a segment under of the head and define it as the new head
        elif direction == LEFT:
            newHead = {'x': wormCoords[HEAD]
                       ['x'] - 1, 'y': wormCoords[HEAD]['y']}  # when the direction is left add a segment on the left side of the head and define it as the new head
        elif direction == RIGHT:
            newHead = {'x': wormCoords[HEAD]
                       ['x'] + 1, 'y': wormCoords[HEAD]['y']}  # when the direction is right add a segment on the right side of the head and define it as the new head
        wormCoords.insert(0, newHead)
        DISPLAYSURF.fill(BGCOLOR)
        drawGrid()  # execute function
        drawWorm(wormCoords)  # execute function
        drawApple(apple)  # execute function
        drawScore(len(wormCoords) - 3)  # execute function
        pygame.display.update()  # execute function
        FPSCLOCK.tick(FPS)  # execute function
# ------------------------------------------------------------ ^ ^ ^
# ------------------------------------------------------------ | | |
#------------------------------------------------------------ Flora

#------------------------------------------------------------ Mark
# ------------------------------------------------------------ | |
# ------------------------------------------------------------ V V


def drawPressKeyMsg():  # Display text at the beginning of the game

    # Get font, contents of text, enable anti-aliasing and select colour -> Make a sureface
    pressKeySurf = BASICFONT.render('Press a key to play.', True, DARKGRAY)
    # Get the rectangular area of the surface
    pressKeyRect = pressKeySurf.get_rect()
    # Set the coordinates for the top-left corner of the rectangle
    pressKeyRect.topleft = (WINDOWWIDTH - 200, WINDOWHEIGHT - 30)
    # Draw the rectangle and the press key text on the game window
    DISPLAYSURF.blit(pressKeySurf, pressKeyRect)


def checkForKeyPress():  # Function for reporting user input via keyboard
    if len(pygame.event.get(QUIT)) > 0:  # Terminate the game when there is a 'QUIT' in the event list
        terminate()

    # Only consider the events which involve a keyboard key being released
    keyUpEvents = pygame.event.get(KEYUP)
    if len(keyUpEvents) == 0:  # If there are no such events, do nothing
        return None
    if keyUpEvents[0].key == K_ESCAPE:  # If the escape key is pressed, close the game
        terminate()
    # For all other key presses, pass the type of keypress to the function which called checkForKeyPress()
    return keyUpEvents[0].key


def showStartScreen():  # Function for displaying start screem
    # Define the font to be used
    titleFont = pygame.font.Font('freesansbold.ttf', 100)
    # Create the first 'Wormy!' surface; white text with darkgreen background
    titleSurf1 = titleFont.render('Wormy!', True, WHITE, DARKGREEN)
    # Create the second 'Wormy!' surface; green text
    titleSurf2 = titleFont.render('Wormy!', True, GREEN)

    # Initialize the initial angle of rotation for both titles surfaces
    degrees1 = 0
    degrees2 = 0

    while True:  # Main loop that handles the title animation
        # Fill the game window with the background colour (black)
        DISPLAYSURF.fill(BGCOLOR)

        rotatedSurf1 = pygame.transform.rotate(
            titleSurf1, degrees1)  # Rotate the first surface
        # Get the surface's corresponding rectangle
        rotatedRect1 = rotatedSurf1.get_rect()
        # Center the rectangle in the middle of the window
        rotatedRect1.center = (WINDOWWIDTH / 2, WINDOWHEIGHT / 2)
        # Push the surface and its rectangle to the screen
        DISPLAYSURF.blit(rotatedSurf1, rotatedRect1)

        rotatedSurf2 = pygame.transform.rotate(
            titleSurf2, degrees2)  # Rotate the second surface
        # Get the surface's corresponding rectangle
        rotatedRect2 = rotatedSurf2.get_rect()
        # Center the rectangle in the middle of the window
        rotatedRect2.center = (WINDOWWIDTH / 2, WINDOWHEIGHT / 2)
        # Push the surface and its rectangle to the screen
        DISPLAYSURF.blit(rotatedSurf2, rotatedRect2)

        drawPressKeyMsg()  # Display the text 'Press a key to start.'

        if checkForKeyPress():  # Continually check if a key has been pressed
            pygame.event.get()  # clear event queue
            return  # Once a key has been pressed, stop the title animation
        pygame.display.update()  # Update the screen
        FPSCLOCK.tick(FPS)  # Update the game's clock
        degrees1 += 3  # rotate by 3 degrees each frame
        degrees2 += 7  # rotate by 7 degrees each frame


def terminate():  # Exit the game
    pygame.quit()  # Close the windom
    sys.exit()  # Stop the python code
# ------------------------------------------------------------ ^ ^
# ------------------------------------------------------------ | |
#------------------------------------------------------------ Mark


#------------------------------------------------------------ Valentyna
# ------------------------------------------------------------ | | | | |
# ------------------------------------------------------------ V V V V V
def getRandomLocation():  # function that gets random location, maybe for the apple or the starting position of the worm?
    return {'x': random.randint(0, CELLWIDTH - 1), 'y': random.randint(0, CELLHEIGHT - 1)}


def showGameOverScreen():  # function defining the game over screen
    # size and font of the "game over"
    gameOverFont = pygame.font.Font('freesansbold.ttf', 150)
    # brings the "game" text to the surface of screen, sets colour to white
    gameSurf = gameOverFont.render('Game', True, WHITE)
    # brings the "over " txt to front of the screen, sets colour to white
    overSurf = gameOverFont.render('Over', True, WHITE)
    # gets the rectangular area of the surface for "game" text
    gameRect = gameSurf.get_rect()
    # gets the rectangular area of the surface for "over" text
    overRect = overSurf.get_rect()
    # position of the rectangle containing "game" text (middle of the top edge of the rectangle)
    gameRect.midtop = (WINDOWWIDTH / 2, 10)
    # position of the rectangle containing "over" text (middle of the top edge of the rectangle)
    overRect.midtop = (WINDOWWIDTH / 2, gameRect.height + 10 + 25)

    # displays "game" text with correct font, location, colour on the surface
    DISPLAYSURF.blit(gameSurf, gameRect)
    # displays "over" text with correct font, location, colour on the surface
    DISPLAYSURF.blit(overSurf, overRect)
    drawPressKeyMsg()  # fucntion that displays the "press a key to play" text
    pygame.display.update()
    pygame.time.wait(500)
    checkForKeyPress()  # clear out any key presses in the event queue

    while True:
        if checkForKeyPress():
            pygame.event.get()  # clear event queue
            return


def drawScore(score):  # function displaying the score of the game
    # font, colour of the score text, the "%s" is a number
    scoreSurf = BASICFONT.render('Score: %s' % (score), True, WHITE)
    # gets the area of the rectangle containing the score, puts it on the surface of screen
    scoreRect = scoreSurf.get_rect()
    # position of the top left corner of rectangle containing the score
    scoreRect.topleft = (WINDOWWIDTH - 120, 10)
    # moves it all to the front of the screen
    DISPLAYSURF.blit(scoreSurf, scoreRect)
# ------------------------------------------------------------ ^ ^ ^ ^ ^
# ------------------------------------------------------------ | | | | |
#------------------------------------------------------------ Valentyna

#------------------------------------------------------------ Ryan
# ------------------------------------------------------------ | |
# ------------------------------------------------------------ V V


# this is the draw wormy function with an variable called wormCorrds as wormy corrdinates.
def drawWorm(wormCoords):
    for coord in wormCoords:  # within the wormCoords variable, coord variable is callable.
        x = coord['x'] * CELLSIZE  # set the x position for the worm's head
        y = coord['y'] * CELLSIZE  # set the y position for the worm's head
        # assign an variable wormSegemtRect to be its body based and x and y position with width and height of CEELSIZE(20)
        wormSegmentRect = pygame.Rect(x, y, CELLSIZE, CELLSIZE)
        # draw worm's body on the DISPLAYSURF surface(game screen) with a darkgreen colour and size of wormSegmentRect
        pygame.draw.rect(DISPLAYSURF, DARKGREEN, wormSegmentRect)
        # draw a smaller rectangle that fill up the body
        wormInnerSegmentRect = pygame.Rect(
            x + 4, y + 4, CELLSIZE - 8, CELLSIZE - 8)
        # draw worm's body on the DISPLAYSURF surface(game screen) with a green colour and size of wormInnerSegmentRect
        pygame.draw.rect(DISPLAYSURF, GREEN, wormInnerSegmentRect)


def drawApple(coord):
    x = coord['x'] * CELLSIZE  # position of apple's x value
    y = coord['y'] * CELLSIZE  # position of apple's y value
    appleRect = pygame.Rect(x, y, CELLSIZE, CELLSIZE)  # size of the apple
    pygame.draw.rect(DISPLAYSURF, RED, appleRect)  # draw the apple out


def drawGrid():  # draw the play screen
    for x in range(0, WINDOWWIDTH, CELLSIZE):  # draw vertical lines
        # draw vertical lines on the DISPLAYSURF surface(game screen) from 0 to x
        pygame.draw.line(DISPLAYSURF, DARKGRAY, (x, 0), (x, WINDOWHEIGHT))
    for y in range(0, WINDOWHEIGHT, CELLSIZE):  # draw horizontal lines
        # draw horizontal lines on the DISPLAYSURF surface(game screen) from 0 to y
        pygame.draw.line(DISPLAYSURF, DARKGRAY, (0, y), (WINDOWWIDTH, y))


if __name__ == '__main__':
    main()
# ------------------------------------------------------------ ^ ^
# ------------------------------------------------------------ | |
#------------------------------------------------------------ Ryan
